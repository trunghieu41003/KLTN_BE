import os
import sys
import mysql.connector
import pandas as pd
import requests
import random
from datetime import datetime, timedelta
import numpy as np
from itertools import combinations
from dotenv import load_dotenv

sys.stdout.reconfigure(encoding='utf-8')

# Load environment variables
load_dotenv()


user_id = sys.argv[1]
token = sys.argv[2]
date = sys.argv[3]

# Database configuration
db_config = {
    "host": os.getenv("HOST_NAME_DB"),
    "user": os.getenv("USER_DB"),
    "password": os.getenv("PASSWORD_DB"),
    "database": os.getenv("DATABASE")
}

# K·∫øt n·ªëi database
conn = mysql.connector.connect(**db_config)
cursor = conn.cursor(dictionary=True)

# L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
cursor.execute("SELECT user_id, calories_daily, health_conditions FROM user WHERE user_id = %s", (user_id,))
user = cursor.fetchone()

# L·∫•y l·ªãch s·ª≠ m√≥n ƒÉn c·ªßa user
cursor.execute("""
    SELECT f.name_food 
    FROM listfood_food lff
    JOIN food f ON lff.food_id = f.food_id
    JOIN listfood lf ON lff.ListFood_id = lf.ListFood_id
    JOIN meal m ON m.meal_id = lf.meal_id
    JOIN diary_listfood dl ON dl.ListFood_ID = lf.ListFood_ID
    JOIN diary d ON d.diary_id = dl.diary_id
    WHERE d.diary_id = %s
""", (user_id,))
history_dishes = [row["name_food"] for row in cursor.fetchall()]

# ƒê·ªçc file m√≥n ƒÉn
file_path = "./dataset/ingredient updated.xlsx"
df = pd.read_excel(file_path)
df.columns = df.columns.str.strip().str.lower()
df = df.dropna(subset=["dishes", "ingredients", "gram", "calories"])
df["dishes"] = df["dishes"].astype(str).str.split(", ")
df["ingredients"] = df["ingredients"].astype(str).str.split(", ")
df = df.explode("dishes").explode("ingredients")

# Chuy·ªÉn ƒë·ªïi gi√° tr·ªã s·ªë
def convert_to_float(value):
    try:
        return float(str(value).replace(",", "."))
    except ValueError:
        return 0

for col in ["calories", "fat", "carb", "protein", "cholesterol", "gram"]:
    df[col] = df[col].apply(convert_to_float)

# Nh√≥m theo m√≥n ƒÉn
grouped = df.groupby("dishes").agg({
    "calories": "sum",
    "fat": "sum",
    "carb": "sum",
    "protein": "sum",
    "cholesterol": "sum",
    "gram": "sum"
}).reset_index()
health_condition = user["health_conditions"]
# L·∫•y danh s√°ch nguy√™n li·ªáu t·ª´ m√≥n trong l·ªãch s·ª≠
history_ingredients = df[df["dishes"].isin(history_dishes)]["ingredients"].unique()
# H√†m t·∫°o th·ª±c ƒë∆°n
print("L·ªãch s·ª≠ m√≥n ƒÉn c·ªßa user:", history_dishes)
print("T√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa user:", health_condition)

def generate_meal_plan(calories_daily):

    if not history_dishes and not health_condition:
    # N·∫øu kh√¥ng c√≥ l·ªãch s·ª≠ m√≥n ƒÉn v√† kh√¥ng c√≥ b·ªánh ‚Üí ch·ªçn ng·∫´u nhi√™n
        selected_dishes = grouped.sample(n=3)
    else:
    # Ch·ªçn m√≥n ƒÉn trong l·ªãch s·ª≠ tr∆∞·ªõc
        history_selected = grouped[grouped["dishes"].isin(history_dishes)]

        if health_condition:
        # Ch·ªâ l·∫•y m√≥n c√≥ cholesterol = 0
            low_cholesterol_dishes = grouped[grouped["cholesterol"] == 0]
            history_selected = history_selected[history_selected["cholesterol"] == 0]

        # N·∫øu ch∆∞a ƒë·ªß 3 m√≥n, b·ªï sung t·ª´ danh s√°ch cholesterol = 0
            if len(history_selected) < 3:
                additional_dishes = low_cholesterol_dishes.sample(n=3-len(history_selected), random_state=None)
                history_selected = pd.concat([history_selected, additional_dishes]).drop_duplicates()

        # N·∫øu v·∫´n ch∆∞a ƒë·ªß 3 m√≥n, ch·ªçn th√™m m√≥n cholesterol th·∫•p nh·∫•t
            if len(history_selected) < 3:
                extra_dishes = grouped.nsmallest(3 - len(history_selected), "cholesterol")
                selected_dishes = pd.concat([history_selected, extra_dishes])
            else:
                selected_dishes = history_selected

        else:
        # N·∫øu kh√¥ng c√≥ b·ªánh, ch·ªçn m√≥n ƒÉn c≈© ho·∫∑c m√≥n c√≥ chung nguy√™n li·ªáu
            similar_dishes = df[df["ingredients"].isin(history_ingredients)]["dishes"].unique()
            additional_dishes = grouped[grouped["dishes"].isin(similar_dishes)]

        # Gh√©p danh s√°ch l·∫°i v√† lo·∫°i b·ªè tr√πng l·∫∑p
            selected_dishes = pd.concat([history_selected, additional_dishes]).drop_duplicates()

        # N·∫øu ch∆∞a ƒë·ªß 3 m√≥n, l·∫•y th√™m m√≥n ng·∫´u nhi√™n
            if len(selected_dishes) < 3:
                extra_dishes = grouped.sample(n=3-len(selected_dishes), random_state=None)
                selected_dishes = pd.concat([selected_dishes, extra_dishes]).drop_duplicates()

    # Gi·ªØ ƒë√∫ng 3 m√≥n
    selected_dishes = selected_dishes.head(3)

    # Ch·ªçn t·ªï h·ª£p 3 m√≥n c√≥ t·ªïng calories g·∫ßn nh·∫•t v·ªõi calories_daily
    best_combination = None
    best_diff = float("inf")

    for combo in combinations(selected_dishes.itertuples(index=False), 3):
        total_calories = sum(item.calories for item in combo)
        diff = abs(float(calories_daily) - total_calories)
        if diff < best_diff:
            best_diff = diff
            best_combination = combo
        if best_diff == 0:
            break

    # T√≠nh to√°n dinh d∆∞·ª°ng cho 3 m√≥n
    if best_combination:
        total_calories = sum(item.calories for item in best_combination)
        scale_factor = float(calories_daily) / total_calories

        meal_plan = []
        for item in best_combination:
            ingredients_df = df[df["dishes"] == item.dishes].copy()
            ingredients_df["gram"] *= scale_factor

            meal_plan.append({
                "foodId": item.dishes,
                "portion": round(item.gram * scale_factor, 2),
                "calories": round(item.calories * scale_factor, 2),
                "carbs": round(item.carb * scale_factor, 2),
                "fat": round(item.fat * scale_factor, 2),
                "protein": round(item.protein * scale_factor, 2),
                "ingredients": [{"name": row.ingredients, "gram": row.gram} for _, row in ingredients_df.iterrows()]
            })
        return meal_plan
    else:
        return []
# Truy v·∫•n food_id t·ª´ t√™n m√≥n ƒÉn
def get_food_id(food_name):
    cursor.execute("SELECT food_id FROM food WHERE name_food = %s", (food_name,))
    result = cursor.fetchone()
    return result["food_id"] if result else None

def send_food_to_api(meal_data, user_id, meal_id, date):
    api_url = f"http://localhost:3000/api/auth/meals/{meal_id}/foods"
    headers = {"Authorization": f"Bearer {token}"}

    for food in meal_data:
        food_id = get_food_id(food["foodId"])  # L·∫•y food_id t·ª´ t√™n m√≥n ƒÉn
        if not food_id:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y food_id cho m√≥n: {food['foodId']}")
            continue

        payload = {
            "userId": user_id,
            "date": date,
            "foodId": food_id,  # G·ª≠i ID thay v√¨ t√™n
            "portion": 1,
            "calories": food["calories"],
            "carbs": food["carbs"],
            "fat": food["fat"],
            "protein": food["protein"],
            "ingredients": food["ingredients"]
        }
        response = requests.post(api_url, json=payload, headers=headers)
        if response.status_code == 200:
            print(f"‚úÖ ƒê√£ g·ª≠i d·ªØ li·ªáu th√†nh c√¥ng cho b·ªØa {meal_id} ng√†y {date}")
        else:
            print(f"‚ùå L·ªói khi g·ª≠i d·ªØ li·ªáu: {response.text}")

def create_diary_entry(user_id, date):
    api_url = "http://localhost:3000/api/auth/diaries"
    headers = {"Authorization": f"Bearer {token}"}
    
    payload = {
        "userId": user_id,
        "date": date
    }

    response = requests.post(api_url, json=payload, headers=headers)

    if response.status_code == 200:
        print(f"‚úÖ Nh·∫≠t k√Ω ƒÉn u·ªëng cho ng√†y {date} ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!")
    else:
        print(f"‚ùå L·ªói khi t·∫°o nh·∫≠t k√Ω ƒÉn u·ªëng: {response.text}")

# T·∫°o th·ª±c ƒë∆°n 7 ng√†y v√† g·ª≠i API
calories_daily = user["calories_daily"]
start_date = datetime.today()

for day in range(7):
    date = (start_date + timedelta(days=day)).strftime("%Y-%m-%d")
    create_diary_entry(user_id, date)
    meal_ids = [1, 2, 3]  # 3 b·ªØa/ng√†y

    meal_plan = generate_meal_plan(calories_daily)

    for i in range(3):
        send_food_to_api([meal_plan[i]], user_id, meal_ids[i], date)


print(f"üéâ Ho√†n th√†nh t·∫°o l·ªãch ƒÉn cho user {user_id} t·ª´ ng√†y {start_date.strftime('%Y-%m-%d')} ƒë·∫øn {date}!")
